{"remainingRequest":"/mnt/c/Users/matth/git/cos243/ride-share/node_modules/babel-loader/lib/index.js!/mnt/c/Users/matth/git/cos243/ride-share/node_modules/vuetify/lib/components/VSparkline/helpers/path.js","dependencies":[{"path":"/mnt/c/Users/matth/git/cos243/ride-share/node_modules/vuetify/lib/components/VSparkline/helpers/path.js","mtime":1605643973821},{"path":"/mnt/c/Users/matth/git/cos243/ride-share/node_modules/cache-loader/dist/cjs.js","mtime":1605136929726},{"path":"/mnt/c/Users/matth/git/cos243/ride-share/node_modules/babel-loader/lib/index.js","mtime":1605643974154}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY2hlY2tDb2xsaW5lYXIsIGdldERpc3RhbmNlLCBtb3ZlVG8gfSBmcm9tICcuL21hdGgnOwovKioKICogRnJvbSBodHRwczovL2dpdGh1Yi5jb20vdW5zcGxhc2gvcmVhY3QtdHJlbmQvYmxvYi9tYXN0ZXIvc3JjL2hlbHBlcnMvRE9NLmhlbHBlcnMuanMjTDE4CiAqLwoKZXhwb3J0IGZ1bmN0aW9uIGdlblBhdGgocG9pbnRzLCByYWRpdXMsIGZpbGwgPSBmYWxzZSwgaGVpZ2h0ID0gNzUpIHsKICBjb25zdCBzdGFydCA9IHBvaW50cy5zaGlmdCgpOwogIGNvbnN0IGVuZCA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV07CiAgcmV0dXJuIChmaWxsID8gYE0ke3N0YXJ0Lnh9ICR7aGVpZ2h0IC0gc3RhcnQueCArIDJ9IEwke3N0YXJ0Lnh9ICR7c3RhcnQueX1gIDogYE0ke3N0YXJ0Lnh9ICR7c3RhcnQueX1gKSArIHBvaW50cy5tYXAoKHBvaW50LCBpbmRleCkgPT4gewogICAgY29uc3QgbmV4dCA9IHBvaW50c1tpbmRleCArIDFdOwogICAgY29uc3QgcHJldiA9IHBvaW50c1tpbmRleCAtIDFdIHx8IHN0YXJ0OwogICAgY29uc3QgaXNDb2xsaW5lYXIgPSBuZXh0ICYmIGNoZWNrQ29sbGluZWFyKG5leHQsIHBvaW50LCBwcmV2KTsKCiAgICBpZiAoIW5leHQgfHwgaXNDb2xsaW5lYXIpIHsKICAgICAgcmV0dXJuIGBMJHtwb2ludC54fSAke3BvaW50Lnl9YDsKICAgIH0KCiAgICBjb25zdCB0aHJlc2hvbGQgPSBNYXRoLm1pbihnZXREaXN0YW5jZShwcmV2LCBwb2ludCksIGdldERpc3RhbmNlKG5leHQsIHBvaW50KSk7CiAgICBjb25zdCBpc1Rvb0Nsb3NlRm9yUmFkaXVzID0gdGhyZXNob2xkIC8gMiA8IHJhZGl1czsKICAgIGNvbnN0IHJhZGl1c0ZvclBvaW50ID0gaXNUb29DbG9zZUZvclJhZGl1cyA/IHRocmVzaG9sZCAvIDIgOiByYWRpdXM7CiAgICBjb25zdCBiZWZvcmUgPSBtb3ZlVG8ocHJldiwgcG9pbnQsIHJhZGl1c0ZvclBvaW50KTsKICAgIGNvbnN0IGFmdGVyID0gbW92ZVRvKG5leHQsIHBvaW50LCByYWRpdXNGb3JQb2ludCk7CiAgICByZXR1cm4gYEwke2JlZm9yZS54fSAke2JlZm9yZS55fVMke3BvaW50Lnh9ICR7cG9pbnQueX0gJHthZnRlci54fSAke2FmdGVyLnl9YDsKICB9KS5qb2luKCcnKSArIChmaWxsID8gYEwke2VuZC54fSAke2hlaWdodCAtIHN0YXJ0LnggKyAyfSBaYCA6ICcnKTsKfQ=="},{"version":3,"sources":["../../../../src/components/VSparkline/helpers/path.ts"],"names":[],"mappings":"AACA,SAAA,cAAA,EAAA,WAAA,EAAA,MAAA,QAAA,QAAA;AAEA;;;;AAGA,OAAM,SAAA,OAAA,CAAA,MAAA,EAAA,MAAA,EAAoD,IAAI,GAAxD,KAAA,EAAkE,MAAM,GAAxE,EAAA,EAA6E;AACjF,QAAM,KAAK,GAAG,MAAM,CAApB,KAAc,EAAd;AACA,QAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAN,MAAA,GAAnB,CAAkB,CAAlB;AAEA,SACE,CAAC,IAAI,GAAG,IAAI,KAAK,CAAC,CAAC,IAAI,MAAM,GAAG,KAAK,CAAd,CAAA,GAAmB,CAAC,KAAK,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,CAA5D,EAAA,GAAkE,IAAI,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,CAA5F,EAAA,IACA,MAAM,CAAN,GAAA,CACO,CAAA,KAAA,EAAA,KAAA,KAAiB;AACpB,UAAM,IAAI,GAAG,MAAM,CAAC,KAAK,GAAzB,CAAmB,CAAnB;AACA,UAAM,IAAI,GAAG,MAAM,CAAC,KAAK,GAAZ,CAAM,CAAN,IAAb,KAAA;AACA,UAAM,WAAW,GAAG,IAAI,IAAI,cAAc,CAAA,IAAA,EAAA,KAAA,EAA1C,IAA0C,CAA1C;;AAEA,QAAI,CAAA,IAAA,IAAJ,WAAA,EAA0B;AACxB,aAAO,IAAI,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,CAA5B,EAAA;AACD;;AAED,UAAM,SAAS,GAAG,IAAI,CAAJ,GAAA,CAChB,WAAW,CAAA,IAAA,EADK,KACL,CADK,EAEhB,WAAW,CAAA,IAAA,EAFb,KAEa,CAFK,CAAlB;AAIA,UAAM,mBAAmB,GAAG,SAAS,GAAT,CAAA,GAA5B,MAAA;AACA,UAAM,cAAc,GAAG,mBAAmB,GAAG,SAAS,GAAZ,CAAA,GAA1C,MAAA;AAEA,UAAM,MAAM,GAAG,MAAM,CAAA,IAAA,EAAA,KAAA,EAArB,cAAqB,CAArB;AACA,UAAM,KAAK,GAAG,MAAM,CAAA,IAAA,EAAA,KAAA,EAApB,cAAoB,CAApB;AAEA,WAAO,IAAI,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,CAA1E,EAAA;AApBJ,GAAA,EAAA,IAAA,CADA,EACA,CADA,IAwBC,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC,IAAI,MAAM,GAAG,KAAK,CAAd,CAAA,GAAmB,CAAnC,IAAA,GAzBP,EACE,CADF;AA2BD","sourcesContent":["import { Point } from '../VSparkline'\nimport { checkCollinear, getDistance, moveTo } from './math'\n\n/**\n * From https://github.com/unsplash/react-trend/blob/master/src/helpers/DOM.helpers.js#L18\n */\nexport function genPath (points: Point[], radius: number, fill = false, height = 75) {\n  const start = points.shift()!\n  const end = points[points.length - 1]\n\n  return (\n    (fill ? `M${start.x} ${height - start.x + 2} L${start.x} ${start.y}` : `M${start.x} ${start.y}`) +\n    points\n      .map((point, index) => {\n        const next = points[index + 1]\n        const prev = points[index - 1] || start\n        const isCollinear = next && checkCollinear(next, point, prev)\n\n        if (!next || isCollinear) {\n          return `L${point.x} ${point.y}`\n        }\n\n        const threshold = Math.min(\n          getDistance(prev, point),\n          getDistance(next, point)\n        )\n        const isTooCloseForRadius = threshold / 2 < radius\n        const radiusForPoint = isTooCloseForRadius ? threshold / 2 : radius\n\n        const before = moveTo(prev, point, radiusForPoint)\n        const after = moveTo(next, point, radiusForPoint)\n\n        return `L${before.x} ${before.y}S${point.x} ${point.y} ${after.x} ${after.y}`\n      })\n      .join('') +\n    (fill ? `L${end.x} ${height - start.x + 2} Z` : '')\n  )\n}\n"],"sourceRoot":""}]}