{"remainingRequest":"/mnt/c/Users/matth/git/cos243/ride-share/node_modules/babel-loader/lib/index.js!/mnt/c/Users/matth/git/cos243/ride-share/node_modules/vuetify/lib/components/VSparkline/helpers/core.js","dependencies":[{"path":"/mnt/c/Users/matth/git/cos243/ride-share/node_modules/vuetify/lib/components/VSparkline/helpers/core.js","mtime":1605643973821},{"path":"/mnt/c/Users/matth/git/cos243/ride-share/node_modules/cache-loader/dist/cjs.js","mtime":1605136929726},{"path":"/mnt/c/Users/matth/git/cos243/ride-share/node_modules/babel-loader/lib/index.js","mtime":1605643974154}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IGZ1bmN0aW9uIGdlblBvaW50cyh2YWx1ZXMsIGJvdW5kYXJ5KSB7CiAgY29uc3QgewogICAgbWluWCwKICAgIG1heFgsCiAgICBtaW5ZLAogICAgbWF4WQogIH0gPSBib3VuZGFyeTsKICBjb25zdCB0b3RhbFZhbHVlcyA9IHZhbHVlcy5sZW5ndGg7CiAgY29uc3QgbWF4VmFsdWUgPSBNYXRoLm1heCguLi52YWx1ZXMpOwogIGNvbnN0IG1pblZhbHVlID0gTWF0aC5taW4oLi4udmFsdWVzKTsKICBjb25zdCBncmlkWCA9IChtYXhYIC0gbWluWCkgLyAodG90YWxWYWx1ZXMgLSAxKTsKICBjb25zdCBncmlkWSA9IChtYXhZIC0gbWluWSkgLyAobWF4VmFsdWUgLSBtaW5WYWx1ZSB8fCAxKTsKICByZXR1cm4gdmFsdWVzLm1hcCgodmFsdWUsIGluZGV4KSA9PiB7CiAgICByZXR1cm4gewogICAgICB4OiBtaW5YICsgaW5kZXggKiBncmlkWCwKICAgICAgeTogbWF4WSAtICh2YWx1ZSAtIG1pblZhbHVlKSAqIGdyaWRZLAogICAgICB2YWx1ZQogICAgfTsKICB9KTsKfQpleHBvcnQgZnVuY3Rpb24gZ2VuQmFycyh2YWx1ZXMsIGJvdW5kYXJ5KSB7CiAgY29uc3QgewogICAgbWluWCwKICAgIG1heFgsCiAgICBtaW5ZLAogICAgbWF4WQogIH0gPSBib3VuZGFyeTsKICBjb25zdCB0b3RhbFZhbHVlcyA9IHZhbHVlcy5sZW5ndGg7CiAgbGV0IG1heFZhbHVlID0gTWF0aC5tYXgoLi4udmFsdWVzKTsKICBsZXQgbWluVmFsdWUgPSBNYXRoLm1pbiguLi52YWx1ZXMpOwogIGlmIChtaW5WYWx1ZSA+IDApIG1pblZhbHVlID0gMDsKICBpZiAobWF4VmFsdWUgPCAwKSBtYXhWYWx1ZSA9IDA7CiAgY29uc3QgZ3JpZFggPSBtYXhYIC8gdG90YWxWYWx1ZXM7CiAgY29uc3QgZ3JpZFkgPSAobWF4WSAtIG1pblkpIC8gKG1heFZhbHVlIC0gbWluVmFsdWUgfHwgMSk7CiAgY29uc3QgaG9yaXpvblkgPSBtYXhZIC0gTWF0aC5hYnMobWluVmFsdWUgKiBncmlkWSk7CiAgcmV0dXJuIHZhbHVlcy5tYXAoKHZhbHVlLCBpbmRleCkgPT4gewogICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5hYnMoZ3JpZFkgKiB2YWx1ZSk7CiAgICByZXR1cm4gewogICAgICB4OiBtaW5YICsgaW5kZXggKiBncmlkWCwKICAgICAgeTogaG9yaXpvblkgLSBoZWlnaHQgKyArKHZhbHVlIDwgMCkgKiBoZWlnaHQsCiAgICAgIGhlaWdodCwKICAgICAgdmFsdWUKICAgIH07CiAgfSk7Cn0="},{"version":3,"sources":["../../../../src/components/VSparkline/helpers/core.ts"],"names":[],"mappings":"AAEA,OAAM,SAAA,SAAA,CAAA,MAAA,EAAA,QAAA,EAEc;AAElB,QAAM;AAAA,IAAA,IAAA;AAAA,IAAA,IAAA;AAAA,IAAA,IAAA;AAAoB,IAAA;AAApB,MAAN,QAAA;AACA,QAAM,WAAW,GAAG,MAAM,CAA1B,MAAA;AACA,QAAM,QAAQ,GAAG,IAAI,CAAJ,GAAA,CAAS,GAA1B,MAAiB,CAAjB;AACA,QAAM,QAAQ,GAAG,IAAI,CAAJ,GAAA,CAAS,GAA1B,MAAiB,CAAjB;AAEA,QAAM,KAAK,GAAG,CAAC,IAAI,GAAL,IAAA,KAAiB,WAAW,GAA1C,CAAc,CAAd;AACA,QAAM,KAAK,GAAG,CAAC,IAAI,GAAL,IAAA,KAAkB,QAAQ,GAAT,QAAC,IAAhC,CAAc,CAAd;AAEA,SAAO,MAAM,CAAN,GAAA,CAAW,CAAA,KAAA,EAAA,KAAA,KAAiB;AACjC,WAAO;AACL,MAAA,CAAC,EAAE,IAAI,GAAG,KAAK,GADV,KAAA;AAEL,MAAA,CAAC,EAAE,IAAI,GAAG,CAAC,KAAK,GAAN,QAAA,IAFL,KAAA;AAGL,MAAA;AAHK,KAAP;AADF,GAAO,CAAP;AAOD;AAED,OAAM,SAAA,OAAA,CAAA,MAAA,EAAA,QAAA,EAEc;AAElB,QAAM;AAAA,IAAA,IAAA;AAAA,IAAA,IAAA;AAAA,IAAA,IAAA;AAAoB,IAAA;AAApB,MAAN,QAAA;AACA,QAAM,WAAW,GAAG,MAAM,CAA1B,MAAA;AACA,MAAI,QAAQ,GAAG,IAAI,CAAJ,GAAA,CAAS,GAAxB,MAAe,CAAf;AACA,MAAI,QAAQ,GAAG,IAAI,CAAJ,GAAA,CAAS,GAAxB,MAAe,CAAf;AAEA,MAAI,QAAQ,GAAZ,CAAA,EAAkB,QAAQ,GAAR,CAAA;AAClB,MAAI,QAAQ,GAAZ,CAAA,EAAkB,QAAQ,GAAR,CAAA;AAElB,QAAM,KAAK,GAAG,IAAI,GAAlB,WAAA;AACA,QAAM,KAAK,GAAG,CAAC,IAAI,GAAL,IAAA,KAAkB,QAAQ,GAAT,QAAC,IAAhC,CAAc,CAAd;AACA,QAAM,QAAQ,GAAG,IAAI,GAAG,IAAI,CAAJ,GAAA,CAAS,QAAQ,GAAzC,KAAwB,CAAxB;AAEA,SAAO,MAAM,CAAN,GAAA,CAAW,CAAA,KAAA,EAAA,KAAA,KAAiB;AACjC,UAAM,MAAM,GAAG,IAAI,CAAJ,GAAA,CAAS,KAAK,GAA7B,KAAe,CAAf;AAEA,WAAO;AACL,MAAA,CAAC,EAAE,IAAI,GAAG,KAAK,GADV,KAAA;AAEL,MAAA,CAAC,EAAE,QAAQ,GAAR,MAAA,GACD,EAAE,KAAK,GAAP,CAAA,IAHG,MAAA;AAAA,MAAA,MAAA;AAKL,MAAA;AALK,KAAP;AAHF,GAAO,CAAP;AAWD","sourcesContent":["import { Point, Boundary, Bar } from '../VSparkline'\n\nexport function genPoints (\n  values: number[],\n  boundary: Boundary\n): Point[] {\n  const { minX, maxX, minY, maxY } = boundary\n  const totalValues = values.length\n  const maxValue = Math.max(...values)\n  const minValue = Math.min(...values)\n\n  const gridX = (maxX - minX) / (totalValues - 1)\n  const gridY = (maxY - minY) / ((maxValue - minValue) || 1)\n\n  return values.map((value, index) => {\n    return {\n      x: minX + index * gridX,\n      y: maxY - (value - minValue) * gridY,\n      value,\n    }\n  })\n}\n\nexport function genBars (\n  values: number[],\n  boundary: Boundary\n): Bar[] {\n  const { minX, maxX, minY, maxY } = boundary\n  const totalValues = values.length\n  let maxValue = Math.max(...values)\n  let minValue = Math.min(...values)\n\n  if (minValue > 0) minValue = 0\n  if (maxValue < 0) maxValue = 0\n\n  const gridX = maxX / totalValues\n  const gridY = (maxY - minY) / ((maxValue - minValue) || 1)\n  const horizonY = maxY - Math.abs(minValue * gridY)\n\n  return values.map((value, index) => {\n    const height = Math.abs(gridY * value)\n\n    return {\n      x: minX + index * gridX,\n      y: horizonY - height +\n        +(value < 0) * height,\n      height,\n      value,\n    }\n  })\n}\n"],"sourceRoot":""}]}